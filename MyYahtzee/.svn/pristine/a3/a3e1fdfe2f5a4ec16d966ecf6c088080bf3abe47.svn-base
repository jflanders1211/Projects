package Project;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonBar;
import javafx.scene.control.ButtonType;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.animation.TranslateTransition;
import javafx.beans.property.SimpleObjectProperty;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.effect.DropShadow;
import javafx.scene.effect.Reflection;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Path;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Shape;
import javafx.util.Duration;

import javax.swing.*;

public class ConnectFour extends Game {

    private int grid[][] = new int[6][7];
    private int row = 6;
    private int col = 7;
    int player1Wins = 0;
    int player2Wins = 0;
    int hasWon = -1;
    int playerTurn = -1;
    boolean restartGame = false;
    private SimpleObjectProperty<Color> playerColorProperty = new SimpleObjectProperty<Color>(Color.RED);

    Button exitButton = new Button("Exit");
    Button mainScreenButton = new Button("Main Screen");
    Button forfeitButton = new Button("Forfeit");
    Text player1WinCount = new Text(players[0].name + "'s win count: " + player1Wins);
    Text player2WinCount = new Text(players[1].name + "'s win count: " + player2Wins);

    public ConnectFour(Player player1, Player player2) {
        super(player1, player2);
    }

    // play the game
    void play(Stage primaryStage) {
        //----------------------------Create the Playing Area----------------------------\\

        BorderPane root = new BorderPane();

        HBox hbox = new HBox();
        hbox.setSpacing(217);
        hbox.getChildren().addAll(mainScreenButton, player1WinCount, forfeitButton, player2WinCount, exitButton);
        root.setTop(hbox);

        GridPane gridpane = new GridPane();
        gridpane.setAlignment(Pos.CENTER);

        primaryStage.setResizable(false);

        Scene scene = new Scene(root, 1280, 720);
        scene.setFill(Color.ANTIQUEWHITE);

        gridpane.getColumnConstraints().addAll(
                new ColumnConstraints(75, 75, Double.MAX_VALUE),  //column 1
                new ColumnConstraints(75, 75, Double.MAX_VALUE),  //column 2
                new ColumnConstraints(75, 75, Double.MAX_VALUE),  //column 3
                new ColumnConstraints(75, 75, Double.MAX_VALUE),  //column 4
                new ColumnConstraints(75, 75, Double.MAX_VALUE),  //column 5
                new ColumnConstraints(75, 75, Double.MAX_VALUE),  //column 6
                new ColumnConstraints(75, 75, Double.MAX_VALUE)); //column 7

        gridpane.getRowConstraints().addAll(
                new RowConstraints(75, 75, Double.MAX_VALUE),  //row 1
                new RowConstraints(75, 75, Double.MAX_VALUE),  //row 2
                new RowConstraints(75, 75, Double.MAX_VALUE),  //row 3
                new RowConstraints(75, 75, Double.MAX_VALUE),  //row 4
                new RowConstraints(75, 75, Double.MAX_VALUE),  //row 5
                new RowConstraints(75, 75, Double.MAX_VALUE)); //row 6

        for (int r = 0; r < row; r++) {
            for (int c = 0; c < col; c++) {
                Rectangle rect = new Rectangle(75, 75);
                Circle circ = new Circle(35);
                circ.centerXProperty().set(37.5);
                circ.centerYProperty().set(37.5);
                Shape cell = Path.subtract(rect, circ);
                cell.setFill(Color.BLUE);
                cell.setStroke(Color.BLUE);
                cell.setOpacity(.8);
                DropShadow effect = new DropShadow();
                effect.setSpread(.2);
                effect.setRadius(17);
                effect.setColor(Color.BLUE);
                cell.setEffect(effect);

                //create the shape/object for the preview disks
                final Circle diskPreview = new Circle(35);
                diskPreview.setOpacity(.5);
                diskPreview.setFill(Color.TRANSPARENT);

                //Make the preview visible when mousing over a potential disk to play
                diskPreview.setOnMouseEntered(new EventHandler<MouseEvent>() {
                    @Override
                    public void handle(MouseEvent arg0) {
                        if (hasWon < 0) {
                            diskPreview.setFill(Color.WHITE);
                            if (playerColorProperty.get() == Color.RED) {
                                diskPreview.setFill(Color.RED);
                            } else {
                                diskPreview.setFill(Color.YELLOW);
                            }
                        }
                    }
                });

                //Make the preview disk transparent again
                diskPreview.setOnMouseExited(new EventHandler<MouseEvent>() {
                    @Override
                    public void handle(MouseEvent arg0) {
                        diskPreview.setFill(Color.TRANSPARENT);
                    }
                });

                //create the shape/object for the actual playing disk
                final Circle disk = new Circle(35);
                disk.fillProperty().bind(playerColorProperty);
                disk.setOpacity(.5);
                disk.setTranslateY(-(75 * (r + 1)));


                final TranslateTransition translateTransition = new TranslateTransition(Duration.millis(300), disk);

                disk.setOnMouseEntered(new EventHandler<MouseEvent>() {
                    @Override
                    public void handle(MouseEvent arg0) {
                        if (hasWon < 0) {
                            diskPreview.setFill(Color.WHITE);
                            if (playerColorProperty.get() == Color.RED) {
                                diskPreview.setFill(Color.RED);
                            } else {
                                diskPreview.setFill(Color.YELLOW);
                            }
                        }
                    }
                });

                disk.setOnMouseExited(new EventHandler<MouseEvent>() {
                    @Override
                    public void handle(MouseEvent arg0) {
                        diskPreview.setFill(Color.TRANSPARENT);
                    }
                });

                int finalR = r;
                int finalC = c;
                disk.setOnMouseClicked(new EventHandler<MouseEvent>() {
                    @Override
                    public void handle(MouseEvent arg0) {
                        if (hasWon < 0) {

                            if (disk.getTranslateY() != 0) {
                                translateTransition.setToY(0);
                                translateTransition.play();
                                if (playerColorProperty.get() == Color.RED) {
                                    playerColorProperty.set(Color.YELLOW);
                                    disk.fillProperty().bind(new SimpleObjectProperty<Color>(Color.RED));
                                    grid[finalR][finalC] = 1;
                                } else {
                                    playerColorProperty.set(Color.RED);
                                    disk.fillProperty().bind(new SimpleObjectProperty<Color>(Color.YELLOW));
                                    grid[finalR][finalC] = 2;
                                }
                            }

                            int temp[] = new int[1];

                            if (playerColorProperty.get() == Color.RED) {
                                temp[0] = 2;
                            } else {
                                temp[0] = 1;
                            }

                            takeTurn(temp);
                        }
                    }
                });

                StackPane stack = new StackPane();
                stack.getChildren().addAll(cell, diskPreview, disk);
                gridpane.add(stack, c, r);

                if (r == gridpane.getColumnConstraints().size() - 1) {
                    stack.setEffect(new Reflection());
                }

            }
        }

        root.setCenter(gridpane);
        primaryStage.setScene(scene);
        primaryStage.show();


        if (restartGame) {
            restartGame = false;
            primaryStage.setScene(scene);
        }

        //Close the application if an "Exit" button from any screen is clicked
        EventHandler<MouseEvent> exitProgram = new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent e) {
                Platform.exit();
            }
        };
        exitButton.addEventFilter(MouseEvent.MOUSE_CLICKED, exitProgram);

        //Give a win to the other player if the "Forfeit" button is clicked
        EventHandler<MouseEvent> playerForfeits = new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent mouseEvent) {
                if (hasWon == -1) {
                    int[] temp = new int[1];
                    // I know the if condition seems backwards but it works this way ¯\_(ツ)_/¯
                    if (playerTurn == 1) {
                        hasWon = 1;
                        temp[0] = 20;
                    } else {
                        hasWon = 2;
                        temp[0] = 10;
                    }
                    takeTurn(temp);
                }
            }
        };
        forfeitButton.addEventFilter(MouseEvent.MOUSE_CLICKED, playerForfeits);

        EventHandler<MouseEvent> returnToMainScreen = new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent mouseEvent) {

            }
        };

    }

    //check if there is a winner
    boolean isWin() {

        //---------------------------- CHECK IF PLAYER 1 HAS FOUR IN A ROW ----------------------------\\

        // horizontalCheck
        for (int j = 0; j < col - 3; j++) {
            for (int i = 0; i < row; i++) {
                if (grid[i][j] == 1 && grid[i][j + 1] == 1 && grid[i][j + 2] == 1 && grid[i][j + 3] == 1) {
                    return true;
                }
            }
        }

        // verticalCheck
        for (int i = 0; i < row - 3; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 1 && grid[i + 1][j] == 1 && grid[i + 2][j] == 1 && grid[i + 3][j] == 1) {
                    return true;
                }
            }
        }

        // ascendingDiagonalCheck
        for (int i = 3; i < row; i++) {
            for (int j = 0; j < col - 3; j++) {
                if (grid[i][j] == 1 && grid[i - 1][j + 1] == 1 && grid[i - 2][j + 2] == 1 && grid[i - 3][j + 3] == 1)
                    return true;
            }
        }

        // descendingDiagonalCheck
        for (int i = 3; i < row; i++) {
            for (int j = 3; j < col; j++) {
                if (grid[i][j] == 1 && grid[i - 1][j - 1] == 1 && grid[i - 2][j - 2] == 1 && grid[i - 3][j - 3] == 1)
                    return true;
            }
        }

        //----------------------------------------------------------------------------------------------\\

        //---------------------------- CHECK IF PLAYER 2 HAS FOUR IN A ROW ----------------------------\\

        // horizontalCheck
        for (int j = 0; j < col - 3; j++) {
            for (int i = 0; i < row; i++) {
                if (grid[i][j] == 2 && grid[i][j + 1] == 2 && grid[i][j + 2] == 2 && grid[i][j + 3] == 2) {
                    return true;
                }
            }
        }

        // verticalCheck
        for (int i = 0; i < row - 3; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 2 && grid[i + 1][j] == 2 && grid[i + 2][j] == 2 && grid[i + 3][j] == 2) {
                    return true;
                }
            }
        }

        // ascendingDiagonalCheck
        for (int i = 3; i < row; i++) {
            for (int j = 0; j < col - 3; j++) {
                if (grid[i][j] == 2 && grid[i - 1][j + 1] == 2 && grid[i - 2][j + 2] == 2 && grid[i - 3][j + 3] == 2)
                    return true;
            }
        }

        // descendingDiagonalCheck
        for (int i = 3; i < row; i++) {
            for (int j = 3; j < col; j++) {
                if (grid[i][j] == 2 && grid[i - 1][j - 1] == 2 && grid[i - 2][j - 2] == 2 && grid[i - 3][j - 3] == 2)
                    return true;
            }
        }

        //----------------------------------------------------------------------------------------------\\

        return false;
    }

    void takeTurn(int input[]) {
        playerTurn = input[0];

        //If there was a winner by gameplay, set hasWon to player number
        if (isWin()) {
            hasWon = playerTurn;
        }

        if (hasWon != -1) {

            // Declare buttons for use in dialog box
            ButtonType Exit = new ButtonType("Exit", ButtonBar.ButtonData.OK_DONE);
            ButtonType mainScreen = new ButtonType("Main Screen");
            ButtonType playAgain = new ButtonType("Play Again");

            EventHandler<MouseEvent> restartGame1 = new EventHandler<MouseEvent>() {
                @Override
                public void handle(MouseEvent mouseEvent) {
                    restartGame = true;
                }
            };

            // Show a dialog box displaying the name of the player who won, and offering buttons for main screen,
            // play again, and exit program.
            if (hasWon == 1) {
                player1Wins++;
                player1WinCount.setText(players[0].name + "'s win count: " + player1Wins);
                Alert a1 = new Alert(Alert.AlertType.NONE, players[0].name + " Wins!", playAgain, mainScreen, Exit);
                a1.showAndWait();
            } else {
                player2Wins++;
                player2WinCount.setText(players[1].name + "'s win count: " + player2Wins);
                Alert a1 = new Alert(Alert.AlertType.NONE, players[1].name + " Wins!", playAgain, mainScreen, Exit);
                a1.showAndWait();
            }
        }
    }
}
