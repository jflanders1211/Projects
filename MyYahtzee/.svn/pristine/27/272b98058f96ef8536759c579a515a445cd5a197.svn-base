package Project;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

import javax.swing.*;

public class Main extends Application
{
    @Override
    public void start(Stage primaryStage)
    {
        //create a stage and set width and height
        primaryStage.setTitle("GameSMASH");
        primaryStage.setWidth(1280);
        primaryStage.setHeight(720);

        //-----------------CREATE THE SCENE FOR THE LOADING SCREEN-----------------\\

        //create a Grid Pane
        GridPane loadGridpane = new GridPane();
        loadGridpane.setAlignment(Pos.TOP_CENTER);
        loadGridpane.setStyle("-fx-background-color: white");

        //Setting the padding
        loadGridpane.setPadding(new Insets(100, 100, 100, 100));

        //set horizontal gap and vertical gap
        loadGridpane.setHgap(0);
        loadGridpane.setVgap(100);

        //creating the text and buttons for the loading screen
        //Text title = new Text("GameSMASH");
        Image gamesmashlogo = new Image("gamesmash.png");
        Button loadingPlay = new Button("Play");
        Button loadingExit = new Button("Exit");
        Button loadingHelp = new Button("Help");
        loadingHelp.setStyle("-fx-background-radius: 15px;");

        //assign everything to the gridpane
        loadGridpane.add(loadingPlay, 0, 2);
        GridPane.setHalignment(loadingPlay, HPos.CENTER);
        loadGridpane.add(loadingExit, 2, 2);
        GridPane.setHalignment(loadingExit, HPos.CENTER);
        loadGridpane.add(loadingHelp, 1, 2);
        GridPane.setHalignment(loadingHelp, HPos.CENTER);
        loadGridpane.add(new ImageView(gamesmashlogo), 1, 0);
        Scene loadingScene = new Scene(loadGridpane);

        //-------------------FINISH SCENE FOR THE LOADING SCREEN-------------------\\



        //-------------------CREATE THE SCENE FOR THE MENU SCREEN-------------------\\

        //create a Grid Pane
        GridPane menuGridpane = new GridPane();
        menuGridpane.setAlignment(Pos.TOP_CENTER);

        //Setting the padding
        menuGridpane.setPadding(new Insets(10, 10, 10, 10));

        //set horizontal gap and vertical gap
        menuGridpane.setHgap(5);
        menuGridpane.setVgap(75);

        //create all the buttons and text
        Button returnToLoadingScreen = new Button("Loading Screen");
        Button menuExit = new Button("Exit");
        Button menuPlay = new Button("Play");

        //create connect four button with image
        Image connectfourart = new Image("connect4art.png");
        Button connectfourPlay = new Button("Connect Four", new ImageView(connectfourart));

        //create tic tac toe button with image
        Image tictactoeart = new Image("tictactoeart.png");
        Button tictactoePlay = new Button("Tic Tac Toe", new ImageView(tictactoeart));

        //create yahtzee button with image
        Image yahtzeeart = new Image("yahtzeeart.png");
        Button yahtzeePlay = new Button("Yahtzee", new ImageView(yahtzeeart));

        //create border pane and hbox pane to put "Loading Screen" and "Exit" at the top
        BorderPane menuBorderPane = new BorderPane();
        HBox hbox = new HBox();
        //put Loading Screen and Exit buttons inside the hbox pane
        hbox.setSpacing(1132);
        hbox.getChildren().addAll(returnToLoadingScreen, menuExit);
        //add hbox to the top of the border pane
        menuBorderPane.setTop(hbox);

        //assign everything to the gridpane
        menuGridpane.add(menuPlay, 0, 1);
        menuGridpane.add(connectfourPlay, 0, 2);
        menuGridpane.add(tictactoePlay, 1, 2);
        menuGridpane.add(yahtzeePlay, 2, 2);

        //add the gridpane to the center of the border pane
        menuBorderPane.setCenter(menuGridpane);

        Scene menuScene = new Scene(menuBorderPane);

        //---------------------FINISH SCENE FOR THE MENU SCREEN---------------------\\

        primaryStage.setScene(loadingScene);
        primaryStage.show();

        //Switch to Menu Screen when the "Play" button on the Loading Screen is clicked
        EventHandler<MouseEvent> clickedPlay = new EventHandler<MouseEvent>()
        {
            @Override
            public void handle(MouseEvent e)
            {
            primaryStage.setScene(menuScene);
            primaryStage.show();
            }
        };
        //when "Play is clicked on the loading Screen, load the new Menu Screen scene
        loadingPlay.addEventFilter(MouseEvent.MOUSE_CLICKED, clickedPlay);

        //Switch to Loading Screen when the "Loading Screen" button on the Menu Screen is clicked
        EventHandler<MouseEvent> returnToLoading = new EventHandler<MouseEvent>()
        {
            @Override
            public void handle(MouseEvent e)
            {
                primaryStage.setScene(loadingScene);
                primaryStage.show();
            }
        };
        returnToLoadingScreen.addEventFilter(MouseEvent.MOUSE_CLICKED, returnToLoading);

        //Close the application if an "Exit" button from any screen is clicked
        EventHandler<MouseEvent> exitProgram = new EventHandler<MouseEvent>()
        {
            @Override
            public void handle(MouseEvent e)
            {
                Platform.exit();
            }
        };
        loadingExit.addEventFilter(MouseEvent.MOUSE_CLICKED, exitProgram);
        menuExit.addEventFilter(MouseEvent.MOUSE_CLICKED, exitProgram);

        //Run the Connect Four game when the "Connect Four" button on the Menu Screen is clicked
        EventHandler<MouseEvent> playConnectFour = new EventHandler<MouseEvent>()
        {
            @Override
            public void handle(MouseEvent mouseEvent)
            {
                ConnectFour connectfour = new ConnectFour(new Player("player1"), new Player("player2"));
                connectfour.Play(primaryStage);
            }
        };
        connectfourPlay.addEventFilter(MouseEvent.MOUSE_CLICKED, playConnectFour);

        //Dialog popup when the "Help" button is clicked on the LoadingScreen
        EventHandler<MouseEvent> loadingScreenHelpDialog = new EventHandler<MouseEvent>()
        {
            @Override
            public void handle(MouseEvent mouseEvent)
            {
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("Help");
                alert.setHeaderText(null);
                alert.setContentText("The help/information dialog. To be completed later.");

                alert.showAndWait();
            }
        };
        loadingHelp.addEventFilter(MouseEvent.MOUSE_CLICKED, loadingScreenHelpDialog);

    }

    public static void main(String args[])
    {
        launch(args);
    }
}
