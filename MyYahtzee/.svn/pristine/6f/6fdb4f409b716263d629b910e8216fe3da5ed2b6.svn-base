package Project;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.animation.TranslateTransition;
import javafx.beans.property.SimpleObjectProperty;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.effect.DropShadow;
import javafx.scene.effect.Reflection;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Path;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Shape;
import javafx.util.Duration;

public class ConnectFour extends Game {

    private int grid[][] = new int[6][7];
    private int row;
    private int col;

    public ConnectFour(Player player1, Player player2)
    {
        super(player1, player2);
    }

    // play the game
    void Play(Stage primaryStage)
    {
        //----------------------------Create the Playing Area----------------------------\\

        Text playerTurn = new Text();
        playerTurn.setFont(new Font(20));
        playerTurn.setText("It is" + players[0].name + "'s turn.");

        Button Exit = new Button("Exit");
        Button mainScreen = new Button("Main Screen");
        Button Forfeit = new Button("Forfeit");

        BorderPane root = new BorderPane();

        HBox hbox = new HBox();
        hbox.setSpacing(548);
        hbox.getChildren().addAll(mainScreen, Forfeit, Exit);
        root.setTop(hbox);

        GridPane gridpane = new GridPane();
        gridpane.setAlignment(Pos.CENTER);

        primaryStage.setResizable(true);

        Scene scene = new Scene(root, 1280, 720);
        scene.setFill(Color.ANTIQUEWHITE);

        gridpane.getColumnConstraints().addAll(
                new ColumnConstraints(75,75,Double.MAX_VALUE),  //column 1
                new ColumnConstraints(75,75,Double.MAX_VALUE),  //column 2
                new ColumnConstraints(75,75,Double.MAX_VALUE),  //column 3
                new ColumnConstraints(75,75,Double.MAX_VALUE),  //column 4
                new ColumnConstraints(75,75,Double.MAX_VALUE),  //column 5
                new ColumnConstraints(75,75,Double.MAX_VALUE),  //column 6
                new ColumnConstraints(75,75,Double.MAX_VALUE)); //column 7

        gridpane.getRowConstraints().addAll(
                new RowConstraints(75,75,Double.MAX_VALUE),  //row 1
                new RowConstraints(75,75,Double.MAX_VALUE),  //row 2
                new RowConstraints(75,75,Double.MAX_VALUE),  //row 3
                new RowConstraints(75,75,Double.MAX_VALUE),  //row 4
                new RowConstraints(75,75,Double.MAX_VALUE),  //row 5
                new RowConstraints(75,75,Double.MAX_VALUE)); //row 6

        for (int r = 0; r < row; r++)
        {
            for (int c = 0; c < col; c++)
            {
                //creating the playing board
                Rectangle rect = new Rectangle(75, 75);
                Circle circ = new Circle(35);
                circ.centerXProperty().set(37.5);
                circ.centerYProperty().set(37.5);
                Shape cell = Path.subtract(rect, circ);
                cell.setFill(Color.BLUE);
                cell.setStroke(Color.BLUE);
                cell.setOpacity(0.8);
                DropShadow effect = new DropShadow();
                effect.setSpread(.2);
                effect.setRadius(15);
                effect.setColor(Color.BLUE);
                cell.setEffect(effect);

                //creating the discs that are in each circle of the game board
                final Circle boarddisk = new Circle(35);
                boarddisk.setFill((Color.TRANSPARENT));
                boarddisk.setOpacity(.5);

                final Circle previewdisk = new Circle(35);
                previewdisk.setFill((Color.RED));

                StackPane stack = new StackPane();
                stack.getChildren().addAll(cell, boarddisk);
                gridpane.add(stack, c, r+1);
                gridpane.add(previewdisk, c, 0);
            }
        }

        root.setCenter(gridpane);
        primaryStage.setScene(scene);
        primaryStage.show();

        //Close the application if an "Exit" button from any screen is clicked
        EventHandler<MouseEvent> exitProgram = new EventHandler<MouseEvent>()
        {
            @Override
            public void handle(MouseEvent e)
            {
                Platform.exit();
            }
        };
        Exit.addEventFilter(MouseEvent.MOUSE_CLICKED, exitProgram);

        //--------------------------------------------------------------------------------\\

    }

    //check if there is a winner
    boolean isWin()
    {
        return true;
    }

    void takeTurn(int input[])
    {

    }
}
